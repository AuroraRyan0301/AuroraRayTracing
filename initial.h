#ifndef INITIALH
#define INITIALH

#include <iostream>
#include <fstream>

#include "hitable_list.h"
#include "random_scene.h"
#include "camera.h"
#include "constant.h"


// hitable对象自始至只代表hit函数，hit_list才包括物体与光线相交的所有信息


hitable* world_initial(){
    vec3 lower_left_corner(-2.0,-1.0,-1.0); //左下角
    vec3 horizontal(4.0,0.0,0.0); //水平方向
    vec3 vertical(0.0,2.0,0.0); //垂直方向
    vec3 origin(0.0,0.0,0.0); //原点

    
    // int number_of_spheres = 5;
    // hitable *list[number_of_spheres]; //hitable类的指针数组

    // // 列表顺序不影响遮挡，sphere.h 里面record的更新方式解决了这个问题

    // list[0] = new sphere(vec3(0,0,-1), 0.5, new lambertian(vec3(0.1,0.2,0.5))); //球心在(0,0,-1)，半径为0.5
    // list[1] = new sphere(vec3(0,-100.5,-1), 100, new lambertian(vec3(0.8,0.8,0))); //球心在(0,-100.5,-1)，半径为100
    // list[2] = new sphere(vec3(1,0,-1), 0.5, new metal(vec3(0.8,0.6,0.2), 0.3)); //球心在(1,0,-1)，半径为0.5
    // list[3] = new sphere(vec3(-1,0,-1), 0.5, new dielectric(1.5)); //球心在(-1,0,-1)，半径为0.5
    // list[4] = new sphere(vec3(-1,0,-1), -0.45, new dielectric(1.5)); //球心在(-1,0,-1)，半径为0.5

    hitable *world = random_scene(); //hitable_list是hitable的派生类，world是hitable类的指针
    
    // std::ofstream file("output.ppm", std::ios::binary);
    // file << "P3\n" << "# Generated by AuroraRyan's ray tracing kernel\n" << nx << " " << ny << "\n" << 255 << "\n";

    // int number_of_pixels = nx*ny;
    return world;
}

//相机初始化

camera cam_initial()
{
     //相机，参数分别是lookfrom, lookat, vup(camera up), vfov，aspect。这里vup 采用world up (0,1,0)
    vec3 lookfrom(-8,2,6);
    vec3 lookat(0,0,2);
    float dist_to_focus = (lookfrom-lookat).length(); //相机到成像平面的距离
    float aperture = 0.05; //光圈大小, 越小越清晰
    float aspect = imageWidth * 1.0f / imageHeight; //折射率
    camera cam(lookfrom, lookat, vec3(0,1,0), 40, aspect, aperture, dist_to_focus); //相机
    return cam;
}

#endif